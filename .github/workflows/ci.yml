name: CI

on:
  push:
    branches-ignore:
      - 'main'
      - 'docs'

env:
  BUILDER_VERSION: v0.9.21
  BUILDER_SOURCE: releases
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  PACKAGE_NAME: aws-iot-device-sdk-js-v2
  LINUX_BASE_IMAGE: ubuntu-16-x64
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_DEFAULT_REGION: us-east-1
  DA_TOPIC: test/da
  DA_SHADOW_PROPERTY: datest
  DA_SHADOW_VALUE_SET: ON
  DA_SHADOW_VALUE_DEFAULT: OFF
  CI_IOT_CONTAINERS: arn:aws:iam::123124136734:role/CRT_IoT_Containers
  CI_PUBSUB_ROLE: arn:aws:iam::180635532705:role/CI_PubSub_Role
  CI_COGNITO_ROLE: arn:aws:iam::180635532705:role/CI_Cognito_Role
  CI_X509_ROLE: arn:aws:iam::180635532705:role/CI_X509_Role
  CI_CUSTOM_AUTHORIZER_ROLE: arn:aws:iam::180635532705:role/CI_CustomAuthorizer_Role
  CI_SHADOW_ROLE: arn:aws:iam::180635532705:role/CI_Shadow_Role
  CI_JOBS_ROLE: arn:aws:iam::180635532705:role/CI_Jobs_Role
  CI_FLEET_PROVISIONING_ROLE: arn:aws:iam::180635532705:role/service-role/CI_FleetProvisioning_Role
  CI_DEVICE_ADVISOR: arn:aws:iam::180635532705:role/CI_DeviceAdvisor_Role
  CI_MQTT5_ROLE: arn:aws:iam::180635532705:role/CI_MQTT5_Role

jobs:

  al2:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: configure AWS credentials (containers)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_IOT_CONTAINERS }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-al2-x64 build -p ${{ env.PACKAGE_NAME }}

  raspberry:
    runs-on: ubuntu-latest # latest
    permissions:
      id-token: write # This is required for requesting the JWT
    strategy:
      fail-fast: false
      matrix:
        image:
          - raspbian-bullseye
    steps:
      - name: configure AWS credentials (containers)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_IOT_CONTAINERS }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      # set arm arch
      - name: Install qemu/docker
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}

  windows:
    runs-on: windows-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }}
    - name: Running samples in CI setup
      run: |
        python -m pip install boto3
    - name: configure AWS credentials (PubSub)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run PubSub sample
      run: |
        python ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_pubsub_cfg.json
    - name: run Windows Certificate Connect sample
      run: |
        python ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_windows_cert_connect_cfg.json
    - name: configure AWS credentials (Device Advisor)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_DEVICE_ADVISOR }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run DeviceAdvisor
      run: |
        cd ./aws-iot-device-sdk-js-v2
        python ./deviceadvisor/script/DATestRun.py

  osx:
    runs-on: macos-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }}
    - name: Running samples in CI setup
      run: |
        python3 -m pip install boto3
    - name: configure AWS credentials (PubSub)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run PubSub sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_pubsub_cfg.json
    - name: configure AWS credentials (Device Advisor)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_DEVICE_ADVISOR }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run DeviceAdvisor
      run: |
        cd ./aws-iot-device-sdk-js-v2
        python3 ./deviceadvisor/script/DATestRun.py

  linux:
    runs-on: ubuntu-20.04 # latest
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }}
    - name: Running samples in CI setup
      run: |
        python3 -m pip install boto3
    - name: configure AWS credentials (PubSub)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run PubSub sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_pubsub_cfg.json
    - name: configure AWS credentials (Device Advisor)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_DEVICE_ADVISOR }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run DeviceAdvisor
      run: |
        cd ./aws-iot-device-sdk-js-v2
        python3 ./deviceadvisor/script/DATestRun.py

  # Runs the samples and ensures that everything is working
  linux-smoke-tests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }}
    - name: Running samples in CI setup
      run: |
        python3 -m pip install boto3
        sudo apt-get update -y
        sudo apt-get install softhsm -y
        softhsm2-util --version
    - name: configure AWS credentials (Connect and PubSub)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run Basic Connect sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_basic_connect_cfg.json
    - name: run Websocket Connect sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_websocket_connect_cfg.json
    - name: run PubSub sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_pubsub_cfg.json
    - name: run PubSub JS sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_pubsub_js_cfg.json
    - name: run PKCS11 Connect sample
      run: |
        mkdir -p /tmp/tokens
        export SOFTHSM2_CONF=/tmp/softhsm2.conf
        echo "directories.tokendir = /tmp/tokens" > /tmp/softhsm2.conf
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_pkcs11_connect_cfg.json
    - name: configure AWS credentials (Cognito)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_COGNITO_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run Cognito Connect sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_cognito_connect_cfg.json
    - name: configure AWS credentials (X509)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_X509_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run X509 sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_x509_connect_cfg.json
    - name: configure AWS credentials (Custom Authorizer)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_CUSTOM_AUTHORIZER_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run CustomAuthorizerConnect sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_custom_authorizer_connect_cfg.json
    - name: configure AWS credentials (Shadow)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_SHADOW_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run Shadow sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_shadow_cfg.json
    - name: configure AWS credentials (Jobs)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_JOBS_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run Jobs sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_jobs_cfg.json
    - name: configure AWS credentials (Fleet provisioning)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_FLEET_PROVISIONING_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run Fleet Provisioning sample
      run: |
        echo "Generating UUID for IoT thing"
        Sample_UUID=$(python3  -c "import uuid; print (uuid.uuid4())")
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_fleet_provisioning_cfg.json --input_uuid ${Sample_UUID}
        python3 ./aws-iot-device-sdk-js-v2/utils/delete_iot_thing_ci.py --thing_name "Fleet_Thing_${Sample_UUID}" --region "us-east-1"
    - name: configure AWS credentials (MQTT5 PubSub)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_MQTT5_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run MQTT5 PubSub sample
      run: |
        python3 ./aws-iot-device-sdk-js-v2/utils/run_sample_ci.py --file ./aws-iot-device-sdk-js-v2/.github/workflows/ci_run_mqtt5_pubsub_cfg.json

  # check that docs can still build
  check-docs:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
      - name: Check docs
        run: |
          npm ci
          ./make-docs.sh

  check-codegen-edits:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for edits to code-generated files
        run: |
          ./utils/check_codegen_edits.py

  check-lockfile-version:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for edits to package-lock.json
        run: |
          test `jq -r '.lockfileVersion' package-lock.json` = 1

